% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{fast_PMS_local_spatial}
\alias{fast_PMS_local_spatial}
\title{Posterior mean variable screening based on local spatial smoothing}
\usage{
fast_PMS_local_spatial(
  x,
  y,
  coords,
  neighbors,
  num_neighbors,
  rho,
  theta = 0.001
)
}
\arguments{
\item{x}{a design matrix of dimension n by p, where n is the sample size and p
is the number of spatially varying predictors}

\item{y}{a vector of length n for response variable}

\item{coords}{a matrix of dimension p by d (d>0) for the spatial locations,
where d is the dimension of space}

\item{neighbors}{a matrix of dimension p by q (q>0) for indices of neighbors}

\item{num_neighbors}{a vector of length p for the number of
neighbors for each predictor}

\item{rho:}{a vector of length p for spatial smoothness parameters}

\item{theta:}{positive number control the prior precision. Default value is 1e-3.}
}
\value{
a list of two variables,
\describe{
\item{pms_select}{indices of the predictors from most important to least important}
\item{pms_stat}{a p by 1 vector of posterior mean statistics}
}
}
\description{
Posterior mean variable screening based on local spatial smoothing
}
\examples{
maskfile <- file.path(system.file("nifti", package="PMS"),"MNI-maxprob-thr0-2mm.nii.gz")
mask <- oro.nifti::readNIfTI(maskfile)
imgfiles <- file.path(system.file("nifti", package="PMS"),sprintf("VBM_example_0\%d.nii.gz",1:5))
img_dat <- fast_read_imgs_mask(imgfiles,maskfile)
img1 <- oro.nifti::readNIfTI(imgfiles[1])
nb <- find_brain_image_neighbors(img1, mask, radius=1)
# simulate data
<<<<<<< HEAD
n = 200
p = ncol(img_dat)
x = matrix(rnorm(n*p),nrow=n,ncol=p)
beta_coef = rep(0,length=ncol(img_dat))
true_idx = nb$mask_img_nb[249,]
beta_coef[true_idx] = 1
rho = rep(0.01,length=ncol(img_dat))
y = x\%*\%beta_coef + rnorm(nrow(img_dat),sd=0.1)
res <- fast_PMS_local_spatial(x=x, y = y, coords=nb$maskcoords,neighbors=nb$mask_img_nb,num_neighbors=nb$num_neighbors, rho = rho)
=======
beta_coef = rep(0,length=ncol(img_dat))
true_idx = nb$mask_img_nb[249,]
beta_coef[true_idx] = 100
rho = rep(0.01,length=ncol(img_dat))
y = img_dat\%*\%beta_coef + rnorm(nrow(img_dat),sd=0.1)
res <- fast_PMS_local_spatial(x=img_dat, y = y, coords=nb$maskcoords,neighbors=nb$mask_img_nb,num_neighbors=nb$num_neighbors, rho = rho)
>>>>>>> c19978e8515171c9da9af9c7edcf7262dc5eb696
}
\author{
Jian Kang \email{<jiankang@umich.edu>}
}
